///Haptika ***THE GALAXY GLOVE!!!***
/*
The Haptika Galaxy Glove is an electronic DIY project which
aims to represent a thereaputic DIY wearable platform to enable a sense of
embodiment and empowerment in special regards to those who are survivors
of trauma and abuse. Through the access, creation, remix, and use of the
Haptika platform, survivors have the potential to RE-member personal trauma
through play, embodiment, and empowerment.
This project in particular aims to mitigate the effects of abuse through specific
gesture and proximity as a means of haptic exploration. Intentional gesture,
mirrored in the premise of intentional making and completed action for assault
survivors, plays a vital role in enabling embodiment and empowerment in the user.
The expressive feedback is provided in an adaptable code sample that allows the user
to enact change in a visual environment. The example was inspired to provide a sense
of possibility, optimism, wonder, and playfulness.
Parts list:
ELECTRONICS:
2x Mini Breadboard
1x Sparkfun Pro Micro (https://www.sparkfun.com/products/12640)
1x Capacitive sense breakout board MPR121
1x Piezo
Copper Tape
Wires
DIY PARTS:
1x Glove
1x velcro or attaching material
Included in this code is Bildr’s code sample
*/
/****************************************************************
I2C_ZX_Demo.ino
XYZ Interactive ZX Sensor
Shawn Hymel @ SparkFun Electronics
May 6, 2015
https://github.com/sparkfun/SparkFun_ZX_Distance_and_Gesture_Sensor_Arduino_Library
Tests the ZX sensor’s ability to read ZX data over I2C. This demo
configures the ZX sensor and periodically polls for Z-axis and X-axis data.
Hardware Connections:
Arduino Pin ZX Sensor Board Function
—————————————
5V VCC Power
GND GND Ground
A4 DA I2C Data
A5 CL I2C Clock
Resources:
Include Wire.h and ZX_Sensor.h
Development environment specifics:
Written in Arduino 1.6.3
Tested with a SparkFun RedBoard
This code is beerware; if you see me (or any other SparkFun
employee) at the local, and you’ve found our code helpful, please
buy us a round!
Distributed as-is; no warranty is given.
****************************************************************/
#include <Wire.h>
#include <ZX_Sensor.h>
// Constants
const int ZX_ADDR = 0x10; // ZX Sensor I2C address
// Global Variables
ZX_Sensor zx_sensor = ZX_Sensor(ZX_ADDR);
uint8_t x_pos;
uint8_t z_pos;
GestureType gesture;
uint8_t gesture_speed;
void setup() {
uint8_t ver;
// Initialize Serial port
Serial.begin(9600);
Serial.println();
Serial.println(“———————————–“);
Serial.println(“SparkFun/GestureSense – I2C ZX Demo”);
Serial.println(“———————————–“);
// Initialize ZX Sensor (configure I2C and read model ID)
if ( zx_sensor.init() ) {
Serial.println(“ZX Sensor initialization complete”);
} else {
Serial.println(“Something went wrong during ZX Sensor init!”);
}
// Read the model version number and ensure the library will work
ver = zx_sensor.getModelVersion();
if ( ver == ZX_ERROR ) {
Serial.println(“Error reading model version number”);
} else {
Serial.print(“Model version: “);
Serial.println(ver);
}
if ( ver != ZX_MODEL_VER ) {
Serial.print(“Model version needs to be “);
Serial.print(ZX_MODEL_VER);
Serial.print(” to work with this library. Stopping.”);
while(1);
}
// Read the register map version and ensure the library will work
ver = zx_sensor.getRegMapVersion();
if ( ver == ZX_ERROR ) {
Serial.println(“Error reading register map version number”);
} else {
Serial.print(“Register Map Version: “);
Serial.println(ver);
}
if ( ver != ZX_REG_MAP_VER ) {
Serial.print(“Register map version needs to be “);
Serial.print(ZX_REG_MAP_VER);
Serial.print(” to work with this library. Stopping.”);
while(1);
}
}
void loop() {
/* /////IS NOT PRINTING GESTURE
if ( zx_sensor.gestureAvailable() ) {
gesture = zx_sensor.readGesture();
gesture_speed = zx_sensor.readGestureSpeed();
switch ( gesture ) {
case NO_GESTURE:
Serial.println(“No Gesture”);
break;
case RIGHT_SWIPE:
Serial.print(“Right Swipe. Speed: “);
Serial.println(gesture_speed, DEC);
break;
case LEFT_SWIPE:
Serial.print(“Left Swipe. Speed: “);
Serial.println(gesture_speed, DEC);
break;
case UP_SWIPE:
Serial.print(“Up Swipe. Speed: “);
Serial.println(gesture_speed, DEC);
break;
default:
break;
}
} */
// If there is position data available, read and print it
if ( zx_sensor.positionAvailable() ) {
x_pos = zx_sensor.readX();
if ( x_pos != ZX_ERROR ) {
//Serial.print(“X: “);
Serial.print(x_pos);
Serial.print(“,”);
}
z_pos = zx_sensor.readZ();
if ( z_pos != ZX_ERROR ) {
// Serial.print(” Z: “);
Serial.println(z_pos);
}
}
}
